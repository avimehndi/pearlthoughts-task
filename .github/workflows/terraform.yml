name: Terraform with ECS Blue/Green Deployment

on:
  workflow_run:
    workflows: [Dockerize and Push to ECR]
    types:
      - completed

env:
  AWS_REGION: us-east-2
  CODEDEPLOY_APP: strapi-app-deploy
  CODEDEPLOY_GROUP: StrapiDeployGroup-avi
  TASK_FAMILY: strapi-task-family

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Get Latest Task Definition ARN
      id: taskdef
      run: |
        LATEST_ARN=$(aws ecs list-task-definitions --family-prefix $TASK_FAMILY --sort DESC --max-items 1 --query "taskDefinitionArns[0]" --output text)
        echo "LATEST_TASK_DEF=$LATEST_ARN" >> $GITHUB_ENV
        echo "Latest task def: $LATEST_ARN"

    - name: Trigger Deployment via CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
          --description "Auto-triggered from GitHub Terraform workflow" \
          --revision revisionType=AppSpecContent,appSpecContent="{\"version\":\"1.0\",\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"$LATEST_TASK_DEF\",\"LoadBalancerInfo\":{\"ContainerName\":\"strapi\",\"ContainerPort\":1337}}}}]}"
