name: Terraform with ECS Blue/Green Deployment

on:
  workflow_run:
    workflows: [Dockerize and Push to ECR]
    types:
      - completed

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: strapi-app-aviral
  ECR_REGISTRY: 607700977843.dkr.ecr.ap-south-1.amazonaws.com
  IMAGE_TAG: latest
  CODEDEPLOY_APP: strapi-app-deploy
  CODEDEPLOY_GROUP: StrapiDeployGroup-avi
  TASK_FAMILY: strapi-task-family

jobs:
  terraform:
    name: Apply Terraform Infrastructure
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Terraform State (if available)
        uses: actions/download-artifact@v4
        with:
          name: terraform-state
          path: ./terraform
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Get Latest Task Definition ARN
        id: taskdef
        run: |
          LATEST_ARN=$(aws ecs list-task-definitions --family-prefix $TASK_FAMILY --sort DESC --max-items 1 --query "taskDefinitionArns[0]" --output text)
          echo "task_arn=$LATEST_ARN" >> $GITHUB_OUTPUT

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name strapi-codedeploy-app-aviral \
            --deployment-group-name StrapiDeployGroup-avi \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "{\"version\":\"1.0\",\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"${{ steps.taskdef.outputs.task_arn }}\",\"LoadBalancerInfo\":{\"ContainerName\":\"strapi\",\"ContainerPort\":1337}}}}]}"
              }
            }'
            