name: Blue/Green ECS Deployment via CodeDeploy

on:
  workflow_dispatch:  # Manual trigger

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: strapi-app-aviral
  IMAGE_TAG: latest
  CODEDEPLOY_APP: StrapiCodeDeployApp-aviral
  CODEDEPLOY_GROUP: StrapiDeployGroup-avi
  TASK_FAMILY: strapi-task-family
  CONTAINER_NAME: strapi

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Latest Task Definition Revision
        id: register
        run: |
          IMAGE_URI=${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          echo "Fetching current task definition..."
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_FAMILY)
          echo $TASK_DEF > old-task.json

          NEW_TASK_DEF=$(cat old-task.json | \
            jq --arg IMAGE "$ECR_REPOSITORY:$IMAGE_TAG" \
            --arg NAME "$CONTAINER_NAME" \
            '.taskDefinition | 
              { 
                family: .family,
                networkMode: .networkMode,
                containerDefinitions: (.containerDefinitions | map(if .name == $NAME then .image = $IMAGE | . else . end)),
                requiresCompatibilities: .requiresCompatibilities,
                cpu: .cpu,
                memory: .memory,
                executionRoleArn: .executionRoleArn,
                taskRoleArn: .taskRoleArn
              }'
          )

          echo "$NEW_TASK_DEF" > new-task-def.json

          echo "Registering new task definition..."
          REGISTERED=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json)
          TASK_DEF_ARN=$(echo $REGISTERED | jq -r '.taskDefinition.taskDefinitionArn')

          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Prepare AppSpec file
        run: |
          cp .github/workflows/appspec.json appspec.json
          sed -i "s|<REPLACE_AT_RUNTIME>|${TASK_DEF_ARN}|g" appspec.json

      - name: Deploy via CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --deployment-config-name CodeDeployDefault.ECSA
